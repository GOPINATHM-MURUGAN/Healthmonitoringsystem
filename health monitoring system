#include <Wire.h>
#include "MAX30105.h"
#include "heartRate.h"
#include <TinyGPS++.h>
#include <SoftwareSerial.h>
#include <OneWire.h>
#include <DallasTemperature.h>

MAX30105 particleSensor;

// Define the serial connection pins
#define ONE_WIRE_BUS 4
#define RX_PIN 16
#define TX_PIN 17

float beatsPerMinute;
int beatAvg;

// Create a software serial object
SoftwareSerial gpsSerial(RX_PIN, TX_PIN);
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);

//heart beat
const byte RATE_SIZE = 4; //Increase this for more averaging. 4 is good.
byte rates[RATE_SIZE]; //Array of heart rates
byte rateSpot = 0;
long lastBeat = 0; //Time at which the last beat occurred

// Create a TinyGPS++ object
TinyGPSPlus gps;



bool fingerDetected = false; // Variable to track finger detection

void setup() 
{
  // Start the serial communication
  Serial.begin(115200);
  Serial.println("Initializing...");

  // Allow time for Serial Monitor to open
  delay(1000); 
  gpsSerial.begin(115200);
  
   if(!particleSensor.begin(Wire, I2C_SPEED_FAST)) //Use default I2C port, 400kHz speed
  
  {
    Serial.println("MAX30102 was not found. Please check wiring/power. ");
    while (1);
  }
  Serial.println("Place your index finger on the sensor with steady pressure.");

  particleSensor.setup(); //Configure sensor with default settings
  particleSensor.setPulseAmplitudeRed(0x0A); //Turn Red LED to low to indicate sensor is running
  particleSensor.setPulseAmplitudeGreen(0); //Turn off Green LED
}

void loop() 
{
  
  //GPS code
  {
    // Read data from the GPS module
    while (gpsSerial.available() > 0) 
    {
      if (gps.encode(gpsSerial.read())) 
      {
        // Print the GPS data
        if (gps.location.isUpdated())
        {
          Serial.print("Latitude: ");
          Serial.println(gps.location.lat(), 6);
          Serial.print("Longitude: ");
          Serial.println(gps.location.lng(), 6);
          // Construct the Google Maps link
          String googleMapsLink = "https://maps.google.com/maps?q=";
          googleMapsLink += String(gps.location.lat(), 6);
          googleMapsLink += ",";
          googleMapsLink += String(gps.location.lng(), 6);
          Serial.print("Google Maps link: ");
          Serial.println(googleMapsLink);
        } 
      }
    }
  }
  
  //ds18b20 code
  {
    // Request temperature reading from all connected sensors
    sensors.requestTemperatures();
    
    // Get temperature from the first sensor found
    float temperatureC = sensors.getTempCByIndex(0);
    
    // Print the temperature in Celsius
    Serial.print("Temperature: ");
    Serial.print(temperatureC);
    Serial.println(" Â°C");
    
    // Delay before the next temperature reading
    delay(1000);
  }

  //max30102 code to measure BPM

  {
  long irValue = particleSensor.getIR();

  
  if (irValue < 50000)
  {
    Serial.print(" 0");
    fingerDetected = false; // Set fingerDetected to false
  }
  else
  {
    //if (checkForBeat(irValue) == true)
  {
    //We sensed a beat!
    long delta = millis() - lastBeat;
    lastBeat = millis();

    Serial.print("millis=");
    Serial.print(millis);
    Serial.print("lastBeat=");
    Serial.print(lastBeat);
    Serial.print("delta=");
    Serial.print(delta);
    

    beatsPerMinute = 60 / (delta / 1000.0);
    Serial.print("beatsPerMinute=");
    Serial.print(beatsPerMinute);

    if (beatsPerMinute < 255 && beatsPerMinute > 20)
    {
      rates[rateSpot++] = (byte)beatsPerMinute; //Store this reading in the array
      rateSpot %= RATE_SIZE; //Wrap variable

      //Take average of readings
      beatAvg = 0;
      for (byte x = 0 ; x < RATE_SIZE ; x++)
        beatAvg += rates[x];
      beatAvg /= RATE_SIZE;
      Serial.print(", Avg BPM=");
      Serial.print(beatAvg);
    }
  }
    fingerDetected = true; // Set fingerDetected to true
  }
  if (fingerDetected)
  {
    Serial.print("IR=");
    Serial.print(irValue);
    Serial.print(", BPM=");
    Serial.print(beatsPerMinute);
    Serial.print(", Avg BPM=");
    Serial.print(beatAvg);
    Serial.println();
  }
  else
  {
    Serial.println('0');
  }
  
}

}
